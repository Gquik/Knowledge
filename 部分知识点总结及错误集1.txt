Java高级工程师面试题总结及参考答案    https://www.cnblogs.com/java1024/p/8594784.html

定义的常量如果为“成员变量”，则必须在定义时就给它赋初始值，否则编译时会报错。
stringbuffer和stringbuider的区别――――线程安全方面stringbuffer更安全
linux常用的一些操作命令 打tar包命令(tar -cvf /-xvf)、查看进程命令(ps -ef|grep)
spring注解相关 @Component其他类  @Controller控制层  @ Service业务层  @ Repository持久层  四种注解意思一样，使用位置不一样
@AutoWired类型 @Resource名称，自动装配
 @Configuration @Value给变量赋初始值，简化配置，以配置文件为准
jQurey相关 document().ready()读取文档，跨浏览器  $() 函数用于将任何对象包裹成 jQuery 对象
jQuery 支持不同类型的选择器，例如 ID 选择器$('#ID')、class 选择器$('.class')、标签选择器$("div")
jQuery单击事件隐藏一张图片 $('#ButtonToClick').click(function(){ $('#ImageToHide').hide();});
jetty和tomcat都是servlet容器，用于启动web项目
数据库语句中，auto_increment--自增
maven 自动识别包与包的兼容性
面向对象编程：我的理解是，我们new一个对象，然后对它的属性和行为的操作就是面向对象编程。我们通过了解对象有哪些属性和行为，解决生活中的一些实际问题的编程思想。
Mybatis:一个实体DAO一个映射文件Mapper,实现与数据库的交互。封装一些sql语句。
Mybatis:一款优秀的持久层框架,支持定制化 SQL,简单的 XML 或注解来配置和映射原生信息,POJO普通的 Java对象映射成数据库中的记录
MVC:模型-视图-控制器，一种将业务逻辑、数据和界面显示分离开的框架（也是一种比较流行设计模式）
SpringBoot:是一个开源框架，它可用于创建可执行的Spring应用程序，采用了习惯优于配置的方法。
SpringBoot:@RestController(@Controller+@ResponseBody) @RequestMapping @SpringBootApplication
SpringBoot:加springloader插件热部署、加springboot devtools依赖包和插件热部署（更好）
通过初步的了解，我知道IP协议对应于网络层，TCP协议对应于传输层，而HTTP协议对应于应用层
springMVC五大模块：DispatcherServlet   -- 前置控制器
									 HandlerMapping接口 -- 处理请求的映射
									 Controller接口 -- 控制器
									 ViewResolver接口的实现类
									 ModelAndView类
springMVC:请求发给DispatcherServlet，依据HandlerMapping接口规则，调用 Controller对请求进行处理，处理完成后返回一个 ModelAndView封装结果给DispatcherServlet，DispatcherServlet依据
                ViewResolver调用相应的jsp响应给前端。
-----------------------------------------------------------------------------------------------------------------------------------------------

网络由下往上分为(物理层、数据链路层)、网络层、传输层、(会话层、表示层和应用层)。
TCP属于传输层协议
TCP的三次握手：①第一次客户端到服务端，客户端SYN_SEND;（服务端LISTEN）②第二次服务端到客户端，服务端SYN_RECV;③第三次客户端到服务端，都进入ESTABLISHED
TCP flags: ①URG紧急指针标志（1表示紧急指针有效、0表示忽略指针）②ACK确认序号标志（1确认号有效、0报文中不含确认号）④PSHpush标志（1无需缓冲排队）
					 ④RST重置连接标志（解决由于主机奔溃等或者非法报文）⑥SYN同步序号，用于建立连接过程 ⑥FINfinish标志，链接结束
TCP的四次挥手：

-----------------------------------------------------------------------------------------------------------------------------------------------

REST和RESTful：REST是一种技术规范，符合这种规范的应用或程序就是RESTful应用程序。url看操作对象，method看操作类型，status code看操作结果
fastDFS分布式文件系统
-----------------------------------------------------------------------------------------------------------------------------------------------

GC工作机制详解
1、GC是负责回收所有无任何引用对象的内存空间。 注意:垃圾回收回收的是无任何引用的对象占据的内存空间而不是对象本身
2、GC回收机制的两种算法，
		a)、引用计数法 
		b)、可达性分析算法（这里的可达性，大家可以看基础2 Java对象的什么周期）
java机制和算法详解      http://blog.chinaunix.net/uid-7374279-id-4489100.html
-----------------------------------------------------------------------------------------------------------------------------------------------

JVM结构原理
1、类加载器classLoader--加载并运行.class文件
         类加载机制    http://blog.csdn.net/tonytfjing/article/details/47212291
2、执行引擎
3、内存区（运行时数据区）
    1)、方法区
    2)、java堆
    3)、java栈
    4)、程序计数器
    5)、本地方法栈
4、本地方法接口
-----------------------------------------------------------------------------------------------------------------------------------------------

java对象的生命周期
创建阶段 、 应用阶段 、（不可见阶段 、不可达阶段） 、收集阶段 、终结阶段、 对象空间重新分配阶段
-----------------------------------------------------------------------------------------------------------------------------------------------

Map或者HashMap的存储原理
哈希表（即数组+链表）
-----------------------------------------------------------------------------------------------------------------------------------------------

HTTP协议，GET和POST 的区别
GET用于信息获取
POST用于信息修改
表面现像上
GET请求的数据会附在URL之后
POST把提交的数据则放置在是HTTP包的包体中
-----------------------------------------------------------------------------------------------------------------------------------------------

SimpleDataFormat是非线程安全的，如何更好的使用而避免风险呢
java8新加的日期API:
LocalDate/LocalTime 和 LocalDateTime
-----------------------------------------------------------------------------------------------------------------------------------------------

如何看待设计模式
专家的经验和智慧
优秀的软件系统中总结出的
成功的的设计方案
可维护，可复用
-----------------------------------------------------------------------------------------------------------------------------------------------

观察者模式
发布/订阅模式 防止各类紧密耦合 主题对象到观察者对象
-----------------------------------------------------------------------------------------------------------------------------------------------

JavaObject类中有哪些方法？
tostring()、wait()、clone()、hashcode()、notify()、notifyall()、finalize()、registerNatives()、getclass()...
